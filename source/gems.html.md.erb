---
title: A family of Gems
---

# TODO UPDATE GEM NAMES AND DESCRIBE DEPENDANCY BETWEEN GEMS

# Hyperloop Gems

The Hyperloop framework comprises of a family of gems which for the most part can be used independently (though some do depend on each other).

## Installation Gems

> See [Installation](/installation) for further installation options.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperloopExpress.png", width: '40'%></div>
<%= link_to 'Hyperloop Express', 'https://github.com/ruby-hyperloop/reactrb-express' %></h5>

> HyperReact for static sites, with no build process needed.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperRails.png", width: '40'%></div>
<%= link_to 'HyperRails', 'https://github.com/ruby-hyperloop/hyper-rails' %></h5>

> One step integration of HyperReact, HyperMesh and HyperRouter with Rails plus generators for Components and Routers.

## Core Hyperloop Gems

> See [Docs](/docs/dsl_overview) for detailed information on how to use these gems or [Tutorials](/tutorials) for working examples.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperComponents.png", width: '40'%></div>
<%= link_to 'HyperReact', 'https://github.com/ruby-hyperloop/hyper-react' %></h5>

> The HyperReact gem implements Hyperloop's **Components**.

 > HyperReact provides a Ruby DSL to Facebook's React. Much of the documentation on this site covers usage of this Gem.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperModels.png", width: '35'%></div>
<%= link_to 'HyperMesh', 'https://github.com/ruby-hyperloop/hyper-mesh' %></h5>

> The HyperMesh gem implements Hyperloop's **Models and Policies**.

> HyperMesh is a policy based CRUD system which wraps ActiveRecord models on the server and extends them to the client. Furthermore it implements push notifications (via a number of possible technologies) so changes to records in use by clients are pushed to those clients if authorised. Isomorphic Ruby in action.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperStores.png", width: '35'%></div>
<%= link_to 'HyperStore', 'https://github.com/ruby-hyperloop/hyper-store' %></h5>

> The HyperStore gem implements Hyperloop's **Stores**.

> Stores hold application state. Stores are Ruby classes that keep the dynamic parts of the state in special state variables

> <h5><div class="hyperlogoalone"><%= image_tag "HyperRouter.png", width: '35'%></div>
<%= link_to 'HyperRouter', 'https://github.com/ruby-hyperloop/reactrb-router/tree/v2-4-0' %></h5>

> HyperRouter provides a Ruby DSL to Facebook's React Router which is a React component that loads other components depending on the current URL.

## Tools, Testing and Debugging Gems

> See [Tools and Debugging](/tools/) for further information.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperSpecs.png", width: '35'%></div>
<%= link_to 'HyperSpec', 'https://github.com/ruby-hyperloop/hyper-spec' %></h5>

> With HyperSpec you can run isomorphic specs for all your Hyperloop code using RSpec. Everything runs as standard RSpec test specs.

> <h5><div class="hyperlogoalone"><%= image_tag "HyperTracer.png", width: '35'%></div>
<%= link_to 'HyperTrace', 'https://github.com/ruby-hyperloop/hyper-trace' %></h5>

> Method tracing and conditional breakpoints for Opal Ruby.

> ##### [Opal Hot Reloader](https://github.com/fkchang/opal-hot-reloader)

> For pure programmer joy, no more page refreshes.

> ##### [Opal Console](https://github.com/fkchang/opal-console)

> Opal in your browser. Great for testing.
